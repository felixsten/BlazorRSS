@page "/scrollfeed"
@using System.ServiceModel.Syndication
@using BlazorRSS.Services
@inject BlazorRSS.Services.RssFeedService RssFeedService
@inject IJSRuntime JSRuntime



@if (newsItems == null)
{
    <p>Laddar</p>
}
else if (!newsItems.Any())
{
    <p>Finns inga nyheter att visa.</p>
}
else
{
    <div class="scrollnews" id="scroll-container">




           
        

        @foreach (var item in pageNewsItems)
        {


                <div class="article-container">
                    <div class="article-image">
                        @if (!string.IsNullOrEmpty(item.ImageUrl))
                        {
                            <img src="@item.ImageUrl" alt="@item.Title" />
                        }
                    </div>

                    <div class="article-info">
                        <h3>@item.Title</h3>
                        <p class="timedate">
                            <em>@item.PublishDate.ToLocalTime().ToString("MMMM dd, yyyy HH:mm")</em>
                        </p>
                        @if (!string.IsNullOrEmpty(item.Description))
                        {
                            <p>@item.Description</p>
                        }
                        else
                        {
                            <p>@item.Summary</p>
                        }
                    </div>
                </div>

            


        }

    </div>
}




@code {
    private List<RssFeedItem>? newsItems;
    private List<RssFeedItem>? pageNewsItems;

    private int currentPage = 1;
    private int pageSize = 4; 
    private bool autoPageEnabled = true;
    private int autoPageInterval = 10000;

    protected override async Task OnInitializedAsync()
    {

        newsItems = await RssFeedService.GetRssFeedAsync();

        UpdatePageNewsItems();
        StartAutoPage();
    }

    private void UpdatePageNewsItems()
    {


        pageNewsItems = newsItems
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private bool HasNextPage => newsItems != null && currentPage * pageSize < newsItems.Count;
    private bool HasPreviousPage => currentPage > 1;

    private void NextPage()
    {
        if (HasNextPage)
        {
            
            currentPage++;
            UpdatePageNewsItems();

        }
    }

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            currentPage--;
            UpdatePageNewsItems();
        }
    }

    private async void StartAutoPage()
    {
        while (autoPageEnabled)
        {
            await Task.Delay(autoPageInterval);
            if (HasNextPage)
            {
                NextPage();
            }
            else
            {
                currentPage = 1;
                UpdatePageNewsItems();
            }
            StateHasChanged();
        }
    }

    
}