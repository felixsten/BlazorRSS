@page "/scrollfeed"
@using System.ServiceModel.Syndication
@using BlazorRSS.Services
@inject BlazorRSS.Services.RssFeedService RssFeedService
@inject IJSRuntime JSRuntime



@if (newsItems == null)
{
    <p>Laddar</p>
}
else if (!newsItems.Any())
{
    <p>Finns inga nyheter att visa.</p>
}
else
{
    <div class="container">
        <div class="scrollnews" id="scroll-container">
    

            

            <div class="article-info">
                <h3>Nyheter från Sydsvenskan</h3>
                <p> </p>
                <p> </p>
            </div>
        

        @foreach (var item in pageNewsItems)
        {


                <div class="article-image">
                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                    {
                        <Image Src="@item.ImageUrl" alt="@item.Title" />
                    }
                </div>

                <div class="article-container">
                    <div class="article-info">
                        <h3>@item.Title</h3>
                        <p class="timedate"><em>@item.PublishDate.ToLocalTime().ToString("MMMM dd, yyyy HH:mm")</em></p>
                        @if (!string.IsNullOrEmpty(item.Description))
                        {
                            <p>@item.Description</p>
                        }
                        else
                        {
                            <p>@item.Summary</p>
                        }
                    </div>
                </div>

                
            

        }
            <div class="pagination-controls">
                <button @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
                <button @onclick="NextPage" disabled="@(!HasNextPage)">Next</button>
            </div>

        </div>
    </div>
}




@code {
    private List<RssFeedItem>? newsItems;
    private List<RssFeedItem>? pageNewsItems;

    private int currentPage = 1;
    private int pageSize = 2; 

    protected override async Task OnInitializedAsync()
    {
        newsItems = await RssFeedService.GetRssFeedAsync();
        UpdatePageNewsItems();
    }

    private void UpdatePageNewsItems()
    {
        pageNewsItems = newsItems
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private bool HasNextPage => newsItems != null && currentPage * pageSize < newsItems.Count;
    private bool HasPreviousPage => currentPage > 1;

    private void NextPage()
    {
        if (HasNextPage)
        {
            currentPage++;
            UpdatePageNewsItems();
        }
    }

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            currentPage--;
            UpdatePageNewsItems();
        }
    }

    
}