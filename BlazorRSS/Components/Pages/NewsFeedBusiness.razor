@page "/newsbusiness"
@using System.ServiceModel.Syndication
@using BlazorRSS.Services
@inject BlazorRSS.Services.RssFeedService RssFeedService



@if (newsItems == null)
{
    <p>Laddar</p>
}
else if (!newsItems.Any())
{
    <p>Finns inga nyheter att visa.</p>
}
else
{
    @if (SelectedArticle != null)
    {
        <SingleArticle Article="SelectedArticle" OnClose="ClearSelectedArticle" />
    }
    else
    {
        <Carousel Autoplay="CarouselAutoPlay.StartOnPageLoad" ShowIndicators="false" ShowPreviousNextControls="true" Touch="true" Keyboard="true">
            <CarouselItem Active="true" Interval="5000">

                <div class="article-image">
                    <img/>
                </div>

                <div class="article-info">
                    <h3>Sky News Business</h3>
                    <p> </p>
                    <p> </p>
                </div>
            </CarouselItem>

            <div class="mini-feed-container">
                <div class="mini-feed-wrapper">
                    <div class="mini-feed-news-content">
                        @foreach (var item in newsItems)
                        {
                            <div class="mini-feed" @onclick="() => ShowArticle(item)">
                                <p class="mini-feed-text">@item.Title</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="allnews-feed-container">
                <div class="allnews-feed-wrapper">
                    <div class="allnews-feed-news-content">
                        @foreach (var item2 in allNewsFeed)
                        {
                            <div class="allnews-feed" @onclick="() => ShowArticle(item2)">
                                <p class="allnews-feed-text">@item2.Title</p>
                            </div>
                        }
                    </div>
                </div>
            </div>


            @foreach (var item in newsItems)
            {





                <CarouselItem Interval="15000">



                    <div class="article-image">
                        @if (!string.IsNullOrEmpty(item.ImageUrl))
                        {
                            <Image Src="@item.ImageUrl" alt="@item.Title" />
                        }
                        else
                        {
                            <Image Src="images/sydsvenskan-logo-only.png" Class="rounded mx-auto d-block" />
                        }
                    </div>

                    <div class="article-container">
                        <div class="article-info" @onclick="() => ShowArticle(item)">
                            <h3>@item.Title</h3>
                            <p class="timedate"><em>@item.PublishDate.ToLocalTime().ToString("MMMM dd, yyyy HH:mm")</em></p>
                            @if (!string.IsNullOrEmpty(item.Description))
                            {
                                <p>@item.Description</p>
                            }
                            else
                            {
                                <p>@item.Summary</p>
                            }
                        </div>
                    </div>


                </CarouselItem>

            }
        </Carousel>
    }

    

     
}




@code {
    private List<RssFeedItem> ?newsItems;
    private List<RssFeedItem>? allNewsPart1;
    private List<RssFeedItem>? allNewsPart2;
    private List<RssFeedItem>? allNewsFeed;
    private RssFeedItem? SelectedArticle;

    private PeriodicTimer? _refreshTimer;
    private CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshFeeds();



        _refreshTimer = new PeriodicTimer(TimeSpan.FromSeconds(30));
        _ = Task.Run(async () =>
        {
            while (await _refreshTimer.WaitForNextTickAsync(_cts.Token))
            {
                await InvokeAsync(async () =>
                {
                    await RefreshFeeds();
                    StateHasChanged();
                });
            }
        });
    }

    private async Task RefreshFeeds()
    {

        newsItems = await RssFeedService.GetRssFeedAsync("https://feeds.skynews.com/feeds/rss/business.xml");
        allNewsPart1 = await RssFeedService.GetRssFeedAsync("https://feeds.skynews.com/feeds/rss/world.xml");
        allNewsPart2 = await RssFeedService.GetRssFeedAsync("https://www.sydsvenskan.se/feeds/feed.xml");

        allNewsFeed = allNewsPart1
            .Concat(allNewsPart2)
            .OrderByDescending(item => item.PublishDate)
            .ToList();


    }

    private void ShowArticle(RssFeedItem article)
    {
        SelectedArticle = article;
    }


    private void ClearSelectedArticle()
    {
        SelectedArticle = null;
    }

    public void Dispose()
    {
        _cts.Cancel();
        _refreshTimer?.Dispose();
    }
}