@page "/scrollfeedbusiness"
@using System.ServiceModel.Syndication
@using BlazorRSS.Services
@inject BlazorRSS.Services.RssFeedService RssFeedService
@inject IJSRuntime JSRuntime



@if (newsItems == null)
{
    <p>Laddar</p>
}
else if (!newsItems.Any())
{
    <p>Finns inga nyheter att visa.</p>
}
else
{
    @if (SelectedArticle != null)
    {
        <SingleArticle Article="SelectedArticle" OnClose="ClearSelectedArticle" />
    }
    else
    {
        <div class="mini-feed-container">
            <div class="mini-feed-wrapper">
                <div class="mini-feed-news-content">
                    @foreach (var item in newsItems)
                    {
                        <div class="mini-feed" @onclick="() => ShowArticle(item)">
                            <p class="mini-feed-text">@item.Title</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="allnews-feed-container">
            <div class="allnews-feed-wrapper">
                <div class="allnews-feed-news-content">
                    @foreach (var item2 in allNewsFeed)
                    {
                        <div class="allnews-feed" @onclick="() => ShowArticle(item2)">
                            <p class="allnews-feed-text">@item2.Title</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="scrollnews" id="scroll-container">







            @foreach (var item in pageNewsItems)
            {


                <div class="article-container">
                    <div class="article-image">
                        @if (!string.IsNullOrEmpty(item.ImageUrl))
                        {
                            <img src="@item.ImageUrl" alt="@item.Title" />
                        }
                    </div>

                    <div class="article-info" @onclick="() => ShowArticle(item)">
                        <h3>@item.Title</h3>
                        <p class="timedate">
                            <em>@item.PublishDate.ToLocalTime().ToString("MMMM dd, yyyy HH:mm")</em>
                        </p>
                        @if (!string.IsNullOrEmpty(item.Description))
                        {
                            <p>@item.Description</p>
                        }
                        else
                        {
                            <p>@item.Summary</p>
                        }
                    </div>
                </div>




            }

        </div>
    }
    
}




@code {
    private List<RssFeedItem>? newsItems;
    private List<RssFeedItem>? pageNewsItems;
    private List<RssFeedItem>? allNewsPart1;
    private List<RssFeedItem>? allNewsPart2;
    private List<RssFeedItem>? allNewsFeed;
    private RssFeedItem? SelectedArticle;

    private int currentPage = 1;
    private int pageSize = 6;
    private bool autoPageEnabled = true;
    private int autoPageInterval = 20000;

    private PeriodicTimer? _refreshTimer;
    private CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshFeeds();

        UpdatePageNewsItems();
        StartAutoPage();

        _refreshTimer = new PeriodicTimer(TimeSpan.FromSeconds(30));
        _ = Task.Run(async () =>
        {
            while (await _refreshTimer.WaitForNextTickAsync(_cts.Token))
            {
                await InvokeAsync(async () =>
                {
                    await RefreshFeeds();
                    UpdatePageNewsItems();
                    StateHasChanged();
                });
            }
        });
    }

    private async Task RefreshFeeds()
    {

        newsItems = await RssFeedService.GetRssFeedAsync("https://feeds.skynews.com/feeds/rss/business.xml");
        allNewsPart1 = await RssFeedService.GetRssFeedAsync("https://feeds.skynews.com/feeds/rss/world.xml");
        allNewsPart2 = await RssFeedService.GetRssFeedAsync("https://www.sydsvenskan.se/feeds/feed.xml");

        allNewsFeed = allNewsPart1
            .Concat(allNewsPart2)
            .OrderByDescending(item => item.PublishDate)
            .ToList();


    }

    private void UpdatePageNewsItems()
    {


        pageNewsItems = newsItems
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private bool HasNextPage => newsItems != null && currentPage * pageSize < newsItems.Count;
    private bool HasPreviousPage => currentPage > 1;

    private void NextPage()
    {
        if (HasNextPage)
        {

            currentPage++;
            UpdatePageNewsItems();

        }
    }

    private void PreviousPage()
    {
        if (HasPreviousPage)
        {
            currentPage--;
            UpdatePageNewsItems();
        }
    }

    private async void StartAutoPage()
    {
        while (autoPageEnabled)
        {
            await Task.Delay(autoPageInterval);
            if (HasNextPage)
            {
                NextPage();
            }
            else
            {
                currentPage = 1;
                UpdatePageNewsItems();
            }
            StateHasChanged();
        }
    }

    private void ShowArticle(RssFeedItem article)
    {
        SelectedArticle = article;
    }


    private void ClearSelectedArticle()
    {
        SelectedArticle = null;
    }

    public void Dispose()
    {
        _cts.Cancel();
        _refreshTimer?.Dispose();
    }

}